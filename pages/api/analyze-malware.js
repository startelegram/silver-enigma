import formidable from 'formidable';
import fs from 'fs';
import axios from 'axios';

// تعطيل تحليل الجسم الافتراضي لـ Next.js لأننا نتعامل مع تحميل الملفات
export const config = {
  api: {
    bodyParser: false,
  },
};

// استخراج الملف من الطلب
const extractFile = (req) => {
  return new Promise((resolve, reject) => {
    const form = new formidable.IncomingForm();
    form.parse(req, (err, fields, files) => {
      if (err) return reject(err);
      resolve({ fields, files });
    });
  });
};

// حساب بصمة الملف (hash)
const calculateFileHash = (filePath) => {
  return new Promise((resolve, reject) => {
    const crypto = require('crypto');
    const hash = crypto.createHash('sha256');
    const stream = fs.createReadStream(filePath);
    
    stream.on('error', err => reject(err));
    stream.on('data', chunk => hash.update(chunk));
    stream.on('end', () => resolve(hash.digest('hex')));
  });
};

// تحليل الملف باستخدام VirusTotal API
const analyzeFileWithVirusTotal = async (fileHash, apiKey) => {
  try {
    // أولاً، نتحقق مما إذا كان الملف قد تم تحليله مسبقًا
    const response = await axios.get(
      `https://www.virustotal.com/api/v3/files/${fileHash}`,
      {
        headers: {
          'x-apikey': apiKey,
        },
      }
    );
    
    return response.data;
  } catch (error) {
    // إذا لم يتم تحليل الملف مسبقًا، نقوم بتحميله للتحليل
    if (error.response && error.response.status === 404) {
      throw new Error('يجب تحميل الملف للتحليل أولاً');
    }
    throw error;
  }
};

// تحميل الملف إلى VirusTotal للتحليل
const uploadFileToVirusTotal = async (filePath, apiKey) => {
  try {
    const formData = new FormData();
    formData.append('file', fs.createReadStream(filePath));
    
    const response = await axios.post(
      'https://www.virustotal.com/api/v3/files',
      formData,
      {
        headers: {
          'x-apikey': apiKey,
          'Content-Type': 'multipart/form-data',
        },
      }
    );
    
    return response.data;
  } catch (error) {
    throw error;
  }
};

// تحويل نتائج VirusTotal إلى تنسيق مناسب لواجهة المستخدم
const formatResults = (vtResults) => {
  const attributes = vtResults.data.attributes;
  const stats = attributes.stats;
  const results = attributes.results;
  
  // حساب مستوى التهديد (0-10)
  const maliciousCount = stats.malicious || 0;
  const totalEngines = stats.malicious + stats.undetected + stats.harmless;
  const threatLevel = Math.round((maliciousCount / totalEngines) * 10);
  
  // تحديد نوع البرمجية الخبيثة
  let malwareType = 'غير معروف';
  const detectionNames = Object.values(results)
    .filter(result => result.category === 'malicious')
    .map(result => result.result);
  
  if (detectionNames.length > 0) {
    // استخراج الأنواع الشائعة من أسماء الكشف
    const types = detectionNames.map(name => {
      if (name.includes('Trojan')) return 'حصان طروادة';
      if (name.includes('Worm')) return 'دودة';
      if (name.includes('Ransomware')) return 'برمجية الفدية';
      if (name.includes('Spyware')) return 'برمجية تجسس';
      if (name.includes('Adware')) return 'برمجية إعلانية';
      if (name.includes('Backdoor')) return 'باب خلفي';
      if (name.includes('Rootkit')) return 'روت كيت';
      return null;
    }).filter(Boolean);
    
    // اختيار النوع الأكثر شيوعًا
    if (types.length > 0) {
      const typeCounts = {};
      types.forEach(type => {
        typeCounts[type] = (typeCounts[type] || 0) + 1;
      });
      
      malwareType = Object.entries(typeCounts)
        .sort((a, b) => b[1] - a[1])[0][0];
    }
  }
  
  // إعداد التفاصيل
  const details = [
    `تم فحص الملف بواسطة ${totalEngines} محرك كشف`,
    `تم اكتشافه كبرمجية خبيثة بواسطة ${maliciousCount} محرك`,
    `نسبة الكشف: ${((maliciousCount / totalEngines) * 100).toFixed(2)}%`,
    `تاريخ التحليل: ${new Date(attributes.date * 1000).toLocaleString('ar-SA')}`,
  ];
  
  // إعداد التوقيعات
  const signatures = Object.entries(results)
    .filter(([_, result]) => result.category === 'malicious')
    .map(([engine, result]) => ({
      name: engine,
      description: result.result || 'برمجية خبيثة',
      severity: 'error',
    }));
  
  // إعداد التوصيات
  const recommendations = [
    'حذف الملف أو عزله فورًا',
    'فحص النظام بالكامل بحثًا عن إصابات أخرى',
    'تحديث برامج مكافحة الفيروسات وجدران الحماية',
  ];
  
  if (threatLevel > 7) {
    recommendations.push('إعادة تثبيت النظام في الحالات الشديدة');
    recommendations.push('استشارة خبير أمن سيبراني');
  }
  
  return {
    threatLevel,
    malwareType,
    details,
    signatures: signatures.slice(0, 10), // نعرض أول 10 توقيعات فقط لتجنب الإطالة
    recommendations,
    rawData: vtResults, // البيانات الخام للاستخدام المتقدم
  };
};

export default async function handler(req, res) {
  // نتحقق من طريقة الطلب
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }
  
  try {
    // استخراج الملف من الطلب
    const { files } = await extractFile(req);
    const file = files.file;
    
    if (!file) {
      return res.status(400).json({ error: 'لم يتم تقديم أي ملف' });
    }
    
    // الحصول على مفتاح API من المتغيرات البيئية
    const apiKey = process.env.VIRUSTOTAL_API_KEY;
    
    if (!apiKey) {
      // للأغراض التجريبية، نقوم بإرجاع بيانات وهمية إذا لم يتم تكوين مفتاح API
      return res.status(200).json({
        threatLevel: 8,
        malwareType: 'حصان طروادة',
        details: [
          'تم فحص الملف بواسطة 70 محرك كشف',
          'تم اكتشافه كبرمجية خبيثة بواسطة 56 محرك',
          'نسبة الكشف: 80.00%',
          `تاريخ التحليل: ${new Date().toLocaleString('ar-SA')}`,
        ],
        signatures: [
          { name: 'Kaspersky', description: 'Trojan.Win32.Generic', severity: 'error' },
          { name: 'Microsoft', description: 'Trojan:Win32/Occamy.C', severity: 'error' },
          { name: 'Symantec', description: 'Trojan Horse', severity: 'error' },
          { name: 'ESET-NOD32', description: 'Win32/Trojan.Generic', severity: 'error' },
          { name: 'McAfee', description: 'GenericRXFO-FG!', severity: 'error' },
        ],
        recommendations: [
          'حذف الملف أو عزله فورًا',
          'فحص النظام بالكامل بحثًا عن إصابات أخرى',
          'تحديث برامج مكافحة الفيروسات وجدران الحماية',
          'إعادة تثبيت النظام في الحالات الشديدة',
          'استشارة خبير أمن سيبراني',
        ],
      });
    }
    
    // حساب بصمة الملف
    const fileHash = await calculateFileHash(file.filepath);
    
    // محاولة تحليل الملف باستخدام بصمته
    try {
      const vtResults = await analyzeFileWithVirusTotal(fileHash, apiKey);
      const formattedResults = formatResults(vtResults);
      return res.status(200).json(formattedResults);
    } catch (error) {
      // إذا لم يتم تحليل الملف مسبقًا، نقوم بتحميله
      if (error.message === 'يجب تحميل الملف للتحليل أولاً') {
        const uploadResult = await uploadFileToVirusTotal(file.filepath, apiKey);
        
        // نحتاج إلى الانتظار حتى يكتمل التحليل
        return res.status(202).json({
          message: 'تم تحميل الملف للتحليل، يرجى المحاولة مرة أخرى بعد بضع دقائق',
          analysisId: uploadResult.data.id,
        });
      }
      
      throw error;
    }
  } catch (error) {
    console.error('Error analyzing file:', error);
    return res.status(500).json({
      error: 'حدث خطأ أثناء تحليل الملف',
      details: error.message,
    });
  }
}