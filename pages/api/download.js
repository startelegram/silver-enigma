// API endpoint for downloading generated tools
import JSZip from 'jszip';
import { generateToolContent } from '../../utils/toolGenerator';
import { generateToolWithDevilGPT } from '../../utils/devilGptToolGenerator';

export default async function handler(req, res) {
  const { tool, customizations, useDevilGPT } = req.query;
  
  if (!tool) {
    return res.status(400).json({ error: 'Tool name is required' });
  }
  
  try {
    console.log(`Processing download request for tool: ${tool}`);
    console.log('Request query:', req.query);
    
    // Parse customizations if provided
    let customizationOptions = {};
    try {
      if (customizations) {
        customizationOptions = JSON.parse(customizations);
      }
    } catch (parseError) {
      console.error('Error parsing customizations:', parseError);
      // Continue with empty customizations
    }
    
    // Generate tool content with customizations
    console.log('Generating tool content...');
    let toolContent;
    
    // Use DevilGPT if specified, otherwise use template-based generation
    if (useDevilGPT === 'true') {
      console.log('Using DevilGPT to generate tool content...');
      toolContent = await generateToolWithDevilGPT(tool);
      console.log('DevilGPT generated content:', JSON.stringify(toolContent, null, 2));
    } else {
      console.log('Using template-based generation...');
      toolContent = generateToolContent(tool, customizationOptions);
    }
    console.log('Tool content generated successfully');
    
    // Ensure additionalFiles exists
    if (!toolContent.additionalFiles) {
      toolContent.additionalFiles = [];
    }
    
    // Create a simple ZIP file with minimal content to ensure it works
    console.log('Creating ZIP file...');
    const zip = new JSZip();
    
    try {
      // Add a simple README file first
      const readmeContent = `# ${tool}

${toolContent.description || 'A tool generated by Builder7e'}

## Features
${toolContent.features || 'No specific features listed.'}`;
      
      zip.file('README.md', readmeContent);
      console.log('Added README.md to ZIP');
      
      // Add main script file if available
      if (toolContent.code && toolContent.filename) {
        zip.file(toolContent.filename, toolContent.code);
        console.log(`Added ${toolContent.filename} to ZIP`);
      } else {
        // Add a default file if no code is available
        zip.file('main.py', '# Generated tool\nprint("Hello from Builder7e Tool Creator")');
        console.log('Added default main.py to ZIP');
      }
      
      // Add additional files if they exist
      if (toolContent.additionalFiles && Array.isArray(toolContent.additionalFiles)) {
        for (const file of toolContent.additionalFiles) {
          if (file && file.name && file.content) {
            zip.file(file.name, file.content);
            console.log(`Added ${file.name} to ZIP`);
          }
        }
      }
      
      // Add requirements or package.json if needed
      if (toolContent.requirements) {
        zip.file('requirements.txt', toolContent.requirements);
        console.log('Added requirements.txt to ZIP');
      } else if (useDevilGPT === 'true') {
        // Add a default requirements.txt for DevilGPT generated tools if none exists
        zip.file('requirements.txt', 'requests\nargparse\nos\nsys');
        console.log('Added default requirements.txt to ZIP');
      }
      
      // Add any files that were shown during generation but might not be in additionalFiles
      // These are the files typically shown in the UI during generation
      const commonFiles = [
        { name: 'utils.py', content: toolContent.utils || '# Utility functions for ' + tool },
        { name: 'config.py', content: toolContent.config || '# Configuration for ' + tool },
        { name: 'setup.py', content: toolContent.setup || 'from setuptools import setup\n\nsetup(\n    name="' + tool + '",\n    version="0.1",\n    description="' + (toolContent.description || 'A security tool') + '",\n    author="Se7enEyes Security",\n    packages=[],\n    install_requires=[' + (toolContent.requirements ? toolContent.requirements.split('\n').map(r => `"${r.trim()}"`).join(',') : '') + '],\n)' }
      ];
      
      // Add common files if they don't already exist in the ZIP
      for (const file of commonFiles) {
        // Check if this file already exists in additionalFiles
        const fileExists = toolContent.additionalFiles.some(f => f.name === file.name);
        if (!fileExists && file.content) {
          zip.file(file.name, file.content);
          console.log(`Added ${file.name} to ZIP`);
        }
      }
      
      // Add license file
      const licenseContent = 'MIT License\n\nCopyright (c) ' + new Date().getFullYear() + ' Se7enEyes Security\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.';
      zip.file('LICENSE', licenseContent);
      console.log('Added LICENSE to ZIP');
      
      // Generate the ZIP file
      console.log('Generating ZIP content...');
      const zipContent = await zip.generateAsync({ type: 'nodebuffer' });
      console.log('ZIP content generated successfully, size:', zipContent.length, 'bytes');
      
      // Set headers for file download
      // استخدام اسم ملف بسيط بدون تحويله إلى أحرف كبيرة
      const simplifiedName = tool.toLowerCase().replace(/[^a-z0-9]/g, '_').substring(0, 30);
      res.setHeader('Content-Disposition', `attachment; filename="${simplifiedName}.zip"`);
      res.setHeader('Content-Type', 'application/zip');
      console.log('Headers set for download');
      
      // Send the ZIP file
      console.log('Sending ZIP file...');
      res.send(zipContent);
      console.log('Download completed successfully');
    } catch (zipError) {
      console.error('Error creating ZIP file:', zipError);
      throw new Error(`Failed to create ZIP file: ${zipError.message}`);
    }
    
  } catch (error) {
    console.error('Error generating tool download:', error);
    console.error('Error stack:', error.stack);
    res.status(500).json({ error: 'Failed to generate tool download', details: error.message });
  }
}